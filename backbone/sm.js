// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    var Car, CarView, car, carView;
    Car = (function(_super) {
      __extends(Car, _super);

      function Car() {
        this.doSomething = __bind(this.doSomething, this);
        return Car.__super__.constructor.apply(this, arguments);
      }

      Car.prototype.doSomething = function() {
        return this.trigger("dosomething");
      };

      return Car;

    })(Backbone.Model);
    CarView = (function(_super) {
      __extends(CarView, _super);

      function CarView() {
        this.showthemagic = __bind(this.showthemagic, this);
        this.somethingelse = __bind(this.somethingelse, this);
        this.myHandler = __bind(this.myHandler, this);
        this.initialize = __bind(this.initialize, this);
        return CarView.__super__.constructor.apply(this, arguments);
      }

      CarView.prototype.initialize = function() {
        return this.model.on("dosomething", this.myHandler);
      };

      CarView.prototype.myHandler = function() {
        return console.log("yes");
      };

      CarView.prototype.somethingelse = function() {
        return console.log("something else");
      };

      CarView.prototype.showthemagic = function() {
        console.log(this.myHandler);
        return console.log(this.somethingelse);
      };

      return CarView;

    })(Backbone.View);
    car = new Car();
    carView = new CarView({
      model: car
    });
    return carView.showthemagic();
  });

}).call(this);

//# sourceMappingURL=sm.js.map
