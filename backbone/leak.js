// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(document).ready(function() {
    var Test, TestView, test;
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        this.remove = __bind(this.remove, this);
        this.render = __bind(this.render, this);
        this.myHandler = __bind(this.myHandler, this);
        this.initialize = __bind(this.initialize, this);
        return TestView.__super__.constructor.apply(this, arguments);
      }

      TestView.prototype.tagName = "div";

      TestView.prototype.className = "zombie";

      TestView.prototype.initialize = function() {
        return this.model.on("a", this.myHandler);
      };

      TestView.prototype.events = {
        "click button": "remove"
      };

      TestView.prototype.myHandler = function() {
        return console.log("this is the handler");
      };

      TestView.prototype.render = function() {
        var input;
        input = "<label for = 'me'>hahaha</label> <input id = 'me' name = 'me' type = 'text' value = 'haha'/> <button>remove</button>";
        this.$el.append(input);
        return this;
      };

      TestView.prototype.remove = function() {
        TestView.__super__.remove.apply(this, arguments);
        this.off();
        return this.model.off(null, null, this);
      };

      return TestView;

    })(Backbone.View);
    Test = (function(_super) {
      __extends(Test, _super);

      function Test() {
        this.someMethod = __bind(this.someMethod, this);
        return Test.__super__.constructor.apply(this, arguments);
      }

      Test.prototype.someMethod = function() {
        return this.trigger("a");
      };

      return Test;

    })(Backbone.Model);
    test = new Test();
    return $("#create").click(function() {
      var testView;
      testView = new TestView({
        model: test
      });
      return $("#testZombie").append(testView.render().el);
    });
  });

}).call(this);

//# sourceMappingURL=leak.js.map
